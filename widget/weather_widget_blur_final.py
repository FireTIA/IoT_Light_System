import sys
import ctypes
import logging
from typing import Optional, Dict, Any

from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout, QGraphicsOpacityEffect
)
from PySide6.QtCore import Qt, QTimer, QPropertyAnimation, QPoint
from PySide6.QtGui import QFont, QColor, QPainter, QBrush

import requests
from bs4 import BeautifulSoup
from colorama import init, Fore, Back, Style

init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
SERVER_URL = "http://192.168.1.100:5000"
WEATHER_ENDPOINT = "/weather_data"
LOGIN_URL = SERVER_URL + "/login"
PASSWORD = "Password_Req!"

# HTTP-—Å–µ—Å—Å–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
session = requests.Session()

def get_csrf_token(html: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç CSRF-—Ç–æ–∫–µ–Ω –∏–∑ HTML-–∫–æ–¥–∞.
    """
    soup = BeautifulSoup(html, "html.parser")
    token_input = soup.find("input", attrs={"name": "csrf_token"})
    if token_input:
        return token_input.get("value")
    return None

def login() -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è CSRF-—Ç–æ–∫–µ–Ω –∏ –ø–∞—Ä–æ–ª—å.
    """
    try:
        res = session.get(LOGIN_URL)
        csrf = get_csrf_token(res.text)
        if not csrf:
            logging.error(f"{Back.WHITE}{Fore.RED}[ERROR]{Fore.RESET}{Back.RESET} CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        data = {
            "csrf_token": csrf,
            "password": PASSWORD
        }
        headers = {
            "Referer": LOGIN_URL
        }
        r = session.post(LOGIN_URL, data=data, headers=headers)
        if "logout" in r.text.lower() or r.status_code == 200:
            logging.info(f"{Fore.GREEN}[Connect]{Fore.RESET} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logging.error(f"{Back.WHITE}{Fore.RED}[ERROR]{Fore.RESET}{Back.RESET} –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞")
            return False
    except Exception as e:
        logging.exception(f"{Back.WHITE}{Fore.RED}[ERROR]{Fore.RESET}{Back.RESET} –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        return False

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∞–∑–º—ã—Ç–∏—è (Windows)
ACCENT_ENABLE_BLURBEHIND = 3
ACCENT_FLAG_ENABLE = 2
WINCOMPATTRIB_ACCENT_POLICY = 19
GRADIENT_COLOR = 0x99000000

class WeatherPanel(QWidget):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏ —É–ª–∏—á–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–æ–≤.
    """
    def __init__(self) -> None:
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(300, 350)

        # –ú–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_label = QLabel("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", self)
        self.status_label.setStyleSheet("color: white; font-size: 10px;")
        self.status_label.move(10, 5)
        self.status_label.resize(200, 15)

        self.initUI()
        self.enable_blur()
        self.fade_in()

        self.old_pos: Optional[QPoint] = None

        if login():
            self.status_label.setText("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            self.load_weather()
            self.start_timer()
        else:
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    def fade_in(self) -> None:
        """
        –†–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞.
        """
        effect = QGraphicsOpacityEffect(self)
        self.setGraphicsEffect(effect)
        anim = QPropertyAnimation(effect, b"opacity")
        anim.setDuration(700)
        anim.setStartValue(0)
        anim.setEndValue(1)
        anim.start()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
        self._fade_anim = anim

    def enable_blur(self) -> None:
        """
        –í–∫–ª—é—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows).
        """
        hwnd = int(self.winId())

        class ACCENTPOLICY(ctypes.Structure):
            _fields_ = [
                ("AccentState", ctypes.c_int),
                ("AccentFlags", ctypes.c_int),
                ("GradientColor", ctypes.c_int),
                ("AnimationId", ctypes.c_int),
            ]

        class WINCOMPATTRDATA(ctypes.Structure):
            _fields_ = [
                ("Attribute", ctypes.c_int),
                ("Data", ctypes.POINTER(ACCENTPOLICY)),
                ("SizeOfData", ctypes.c_size_t),
            ]

        accent = ACCENTPOLICY()
        accent.AccentState = ACCENT_ENABLE_BLURBEHIND
        accent.AccentFlags = ACCENT_FLAG_ENABLE
        accent.GradientColor = GRADIENT_COLOR
        accent.AnimationId = 0

        data = WINCOMPATTRDATA()
        data.Attribute = WINCOMPATTRIB_ACCENT_POLICY
        data.Data = ctypes.pointer(accent)
        data.SizeOfData = ctypes.sizeof(accent)

        try:
            ctypes.windll.user32.SetWindowCompositionAttribute(hwnd, ctypes.byref(data))
        except Exception as e:
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è")

    def initUI(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∏–¥–∂–µ—Ç–∞.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 20, 15, 15)
        layout.setSpacing(6)

        def header(text: str) -> QLabel:
            lbl = QLabel(text)
            lbl.setStyleSheet("color: #00eaff; font-weight: bold;")
            lbl.setFont(QFont("Segoe UI", 10))
            return lbl

        def create_row(label_text: str) -> QHBoxLayout:
            hbox = QHBoxLayout()
            lbl = QLabel(label_text)
            lbl.setStyleSheet("color: #cccccc;")
            lbl.setFont(QFont("Segoe UI", 9))
            value_lbl = QLabel("--")
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∫–∏ –ø–æ –∏–º–µ–Ω–∏
            value_lbl.setObjectName(label_text.lower().replace(" ", "_"))
            value_lbl.setStyleSheet("color: #ffffff;")
            value_lbl.setFont(QFont("Segoe UI", 9))
            hbox.addWidget(lbl)
            hbox.addStretch()
            hbox.addWidget(value_lbl)
            return hbox

        # –†–∞–∑–¥–µ–ª "–ü–æ–≥–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ (BME280)"
        layout.addWidget(header("–ü–æ–≥–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ (BME280)"))
        layout.addLayout(create_row("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"))
        layout.addLayout(create_row("–í–ª–∞–∂–Ω–æ—Å—Ç—å"))
        layout.addLayout(create_row("–î–∞–≤–ª–µ–Ω–∏–µ"))
        layout.addLayout(create_row("–ü—Ä–æ–≥–Ω–æ–∑"))
        layout.addLayout(create_row("–ò—Å—Ç–æ—á–Ω–∏–∫"))

        layout.addSpacing(10)
        # –†–∞–∑–¥–µ–ª "–ü–æ–≥–æ–¥–∞ —Å —É–ª–∏—Ü—ã (DHT22)"
        layout.addWidget(header("–ü–æ–≥–æ–¥–∞ —Å —É–ª–∏—Ü—ã (DHT22)"))
        layout.addLayout(create_row("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (DHT22)"))
        layout.addLayout(create_row("–í–ª–∞–∂–Ω–æ—Å—Ç—å (DHT22)"))

    def paintEvent(self, event) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è.
        """
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(QBrush(QColor(20, 20, 20, 100)))
        painter.setPen(Qt.NoPen)
        painter.drawRoundedRect(self.rect(), 15, 15)

    def start_timer(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.
        """
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.load_weather)
        self.timer.start(10000)

    def load_weather(self):
        try:
            response = session.get(SERVER_URL + WEATHER_ENDPOINT)
            if response.status_code == 200:
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω ‚Äî —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                self.status_label.setText("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
                data = response.json()
                self.update_weather(data)
            else:
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –∫–æ–¥ –Ω–µ 200
                self.status_label.setText("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç, —Å–µ—Ç—å –æ—Ç–≤–∞–ª–∏–ª–∞—Å—å –∏ —Ç.–¥.)
            logging.exception(f"[–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞] {e}")
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

    def update_weather(self, data: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        bme = data.get("bme", {})
        dht = data.get("dht", {})

        def update_label(field: str, value: str) -> None:
            lbl = self.findChild(QLabel, field.lower().replace(" ", "_"))
            if lbl:
                lbl.setText(value)

        if bme:
            update_label("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{bme.get('temperature', '--')}¬∞C")
            update_label("–í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{bme.get('humidity', '--')}%")
            update_label("–î–∞–≤–ª–µ–Ω–∏–µ", f"{bme.get('pressure', '--')} hPa")
            update_label("–ü—Ä–æ–≥–Ω–æ–∑", bme.get("forecast_weather", "--"))
            update_label("–ò—Å—Ç–æ—á–Ω–∏–∫", bme.get("source", "--"))

        if dht:
            update_label("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (DHT22)", f"{dht.get('temperature', '--')}¬∞C")
            update_label("–í–ª–∞–∂–Ω–æ—Å—Ç—å (DHT22)", f"{dht.get('humidity', '--')}%")

    def mousePressEvent(self, event) -> None:
        self.old_pos = event.globalPos()

    def mouseMoveEvent(self, event) -> None:
        if self.old_pos:
            delta = event.globalPos() - self.old_pos
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.old_pos = event.globalPos()

    def closeEvent(self, event) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞.
        """
        if hasattr(self, "timer"):
            self.timer.stop()
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    window = WeatherPanel()
    window.show()
    sys.exit(app.exec())
